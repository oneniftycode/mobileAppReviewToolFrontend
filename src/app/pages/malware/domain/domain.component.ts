import { Component, OnInit, TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { MatTableDataSource } from '@angular/material/table';
import { NbDialogService } from '@nebular/theme';
import {MalwareService} from '../../../@core/utils/malware.service';

export interface DomaineMalwareCheck {
  severity: string;
  domain: string;
  ip: string;
  country: string;
  city: string;
  map: any;
}
@Component({
  selector: 'ngx-security-binary',
  styleUrls: ['./domain.component.scss'],
  templateUrl: './domain.component.html',
})


export class DomainComponent implements OnInit {
  id: string;
  system: string;
  displayedColumnsDomaineMalwareCheck: string[] = [ 'severity', 'domain', 'ip', 'country', 'city', 'map' ];
  dataSourceDomaineMalwareCheck: any; //  = new MatTableDataSource(BINARYANALYSIS_DATA);
  domaineMalwareCheck: any;
  childId: string;
  selectedItem: string;
  emptyCheck: boolean = false;

  constructor(private route: ActivatedRoute,
    private router: Router,
    private dialogService: NbDialogService,
    private malwareService: MalwareService) {
  }

  ngOnInit() {
    this.route.data.subscribe(data => {
      this.domaineMalwareCheck = data.domaineMalwareCheck;
      this.dataSourceDomaineMalwareCheck = new MatTableDataSource(this.domaineMalwareCheck.list);
      this.checkEmpty();
      this.dataSourceDomaineMalwareCheck.filterPredicate = (data1: DomaineMalwareCheck, filter: string) => {
        return data1.severity.toLowerCase() === filter.toLowerCase();
      };
    });
    this.route.params.subscribe(params => {
      this.childId = params['severity'];
      if (this.selectedItem !== params['severity'] ) {
        this.selectedItem = params['severity'];
      }
      if (params['severity'] === 'all') {
        this.selectedItem = '';
      }
    });
    this.route.parent.params.subscribe(params => {
      this.id = params['id'];
      this.system = params['system'];
    });

    this.dataSourceDomaineMalwareCheck.filterPredicate = (data: DomaineMalwareCheck, filter: string) => {
          return data.severity === filter;
    };
  }
  applyFilter(filterValue: string) {
    this.dataSourceDomaineMalwareCheck.filter = filterValue;
  }
  doWhatEverOnChange() {
      // this.router.navigateByUrl(this.router.url.replace(this.childId, this.selectedItem));
    this.applyFilter(this.selectedItem);
    this.checkEmpty();
  }
  checkEmpty() {
    this.emptyCheck = this.dataSourceDomaineMalwareCheck.filteredData.length === 0;
  }
  openMap(dialog: TemplateRef<any>, map) {
    this.dialogService.open(dialog, { context: { lat: map.latitude, lng: map.longtitude } });
  }
}
