import { Component, OnInit, ViewChild } from '@angular/core';
import { Router, Event, RouterEvent, ActivatedRoute } from '@angular/router';
import { MatTableDataSource } from '@angular/material/table';
import { MalwareService } from '../../@core/utils/malware.service';
import { RecentScanService, RecentScan } from '../../@core/utils/recent-scans';
import { ReportTopInfoService } from '../../@core/utils/report-top-info';
import { map, takeUntil, filter } from 'rxjs/operators';

export interface APKID {
  severity: string;
  dex: string;
  detextion: string;
}


export interface AndroidJavaApi {
  api: string;
  file: string;
}
export interface BrowsableActivities {
  activity: string;
  file: string;
}


@Component({
  selector: 'ngx-malware',
  styleUrls: ['./malware.component.scss'],
  templateUrl: './malware.component.html',
})


export class MalwareComponent implements OnInit {

  title: string;
  id: string;
  system: string;

  selectedItem = '';

  recentScan: RecentScan;
  topInfo: any;
  topAppStoreInfo: any;
  signerCertificate: any;
  linkAPKID = false;
  linkDomainCheck = false;
  linkJavaApi = false;
  linkActivities = false;
  linkAntivirus = false;
  linkVerdict = false;
  hover = true;
  browsableActivities: any;
  totalApkid: any;
  totalAndroidJavaApi: any;
  totalDomain: any;
  totalBrowsableActivities: any;
  totalAntivirus: any;
  totalVerdict: any;
  malwareOverview: any;
  dynamic: boolean;
  static: boolean;
  interactif: boolean;

  constructor(private router: Router,
    private route: ActivatedRoute,
    private recentScanService: RecentScanService,
    private reportTopInfoService: ReportTopInfoService,
    private malwareService: MalwareService) {

    this.topInfo = {};
    this.topAppStoreInfo = {};
    this.signerCertificate = {};

    this.browsableActivities = {};
    this.recentScan = new RecentScan();
    this.dynamic = false;
    this.static = true;
    this.interactif = false;
  }
  ngOnInit() {
    // this.totalApkid = this.route.snapshot.data.apkidResolver ? this.route.snapshot.data.apkidResolver.count : 0;
    // this.totalAndroidJavaApi = this.route.snapshot.data.androidJavaApiResolver ?
    //   this.route.snapshot.data.androidJavaApiResolver.count_high +
    //   this.route.snapshot.data.androidJavaApiResolver.count_low : 0;
    // this.totalDomain = this.route.snapshot.data.domainResolver ?
    //   this.route.snapshot.data.domainResolver.count_high + this.route.snapshot.data.domainResolver.count_low : 0;
    // this.totalBrowsableActivities = this.route.snapshot.data.browsableActivitiesResolve ?
    //   this.route.snapshot.data.browsableActivitiesResolver.length : 0;
    // this.totalAntivirus = this.route.snapshot.data.antivirusResolver ?
    //   this.route.snapshot.data.antivirusResolver.length : 0;
    // this.totalVerdict = this.route.snapshot.data.verdictResolver ?
    //   this.route.snapshot.data.verdictResolver.length : 0;
this.route.params.subscribe(params => {
      this.id = params['id'];
      this.system = params['system'];
      this.malwareOverview = this.route.snapshot.data.malwareOverview;
      if (this.malwareOverview) {
        if (this.system === 'android') {
          this.totalApkid = this.malwareOverview.apkid.total;
          this.totalAndroidJavaApi = this.malwareOverview.api.total;
          this.totalDomain = this.malwareOverview.domain.total;
          this.totalBrowsableActivities = this.malwareOverview.activity.total;
          this.totalAntivirus = this.malwareOverview.antivirus.total;
          this.totalVerdict = this.route.snapshot.data.verdictResolver ?
           this.route.snapshot.data.verdictResolver.length : 0;
        } else {
          this.totalDomain = this.malwareOverview.domain.total;
        }
      }
      this.recentScanService.getRecentScans().subscribe((value: RecentScan[]) => {
        this.recentScan = value.filter(x => x.md5 === this.id)[0];
        this.title = ' Malware Analysis > ' + this.recentScan.app_name;
      });

    });

    this.menuFunc(this.router.url);
    this.router.events.pipe(
      filter((e: Event): e is RouterEvent => e instanceof RouterEvent)).subscribe((e: RouterEvent) => {
      this.menuFunc(e.url);
    });
  }
  menuFunc(router): void {
    if (router.includes('/activities')) {
      this.resetMenu();
      this.linkActivities = true;
    } else if (router.includes('/apkid')) {
      this.resetMenu();
      this.linkAPKID = true;
    } else if (router.includes('/domain')) {
      this.resetMenu();
      this.linkDomainCheck = true;
    } else if (router.includes('/javaApi')) {
      this.resetMenu();
      this.linkJavaApi = true;
    } else if (router.includes('/antivirus')) {
      this.resetMenu();
      this.linkAntivirus = true;
    } else if (router.includes('/verdict')) {
      this.resetMenu();
      this.linkVerdict = true;
    }  else {
      this.resetMenu();
      this.linkAPKID = true;
    }
  }
  resetMenu(): void {
    this.linkActivities = false;
    this.linkAPKID = false;
    this.linkDomainCheck = false;
    this.linkJavaApi = false;
    this.linkAntivirus = false;
    this.linkVerdict = false;
  }
}
